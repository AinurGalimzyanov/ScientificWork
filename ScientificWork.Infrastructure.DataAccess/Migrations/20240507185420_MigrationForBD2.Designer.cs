// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScientificWork.Infrastructure.DataAccess;

#nullable disable

namespace ScientificWork.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240507185420_MigrationForBD2")]
    partial class MigrationForBD2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificAreaSubsectionsId");

                    b.HasIndex("ScientificAreaSubsectionsId");

                    b.ToTable("ProfessorScientificAreaSubsection");
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificInterestsId");

                    b.HasIndex("ScientificInterestsId");

                    b.ToTable("ProfessorScientificInterest");
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificAreaSubsectionScientificWork");
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificAreaSubsectionStudent");
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificInterestScientificWork");
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificInterestStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("ProfessorFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProfessorFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("StudentFavoriteProfessor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("StudentFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoriteStudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "FavoriteStudentId");

                    b.HasIndex("FavoriteStudentId");

                    b.ToTable("StudentFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScientificAreas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56"),
                            Name = "Естественные науки"
                        },
                        new
                        {
                            Id = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927"),
                            Name = "Техника и технологии"
                        },
                        new
                        {
                            Id = new Guid("f0295263-40ad-4c76-ae74-84b62204f960"),
                            Name = "Медицина и здравоохранение"
                        },
                        new
                        {
                            Id = new Guid("a1fab631-3a9d-4406-817a-81a142457bc9"),
                            Name = "Сельскохозяйственные науки"
                        },
                        new
                        {
                            Id = new Guid("9333925b-600e-490d-8799-3cfc568c055c"),
                            Name = "Общественные науки"
                        },
                        new
                        {
                            Id = new Guid("ea637f26-0f94-4a20-8a4c-cbdb0e9d5b03"),
                            Name = "Гуманитарные науки"
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("ScientificAreaSubsections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d03aea70-6ec6-470a-b9e2-b02e8198b9e9"),
                            Name = "Математика",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("72d60c11-a8d2-43cc-b654-6561252a24de"),
                            Name = "Компьютерные и информационные науки",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("96748663-7b1a-4f90-92f4-89ae5ea31590"),
                            Name = "Физика",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("8460d38e-06fc-4a9b-91fc-3890860c22c4"),
                            Name = "Химия",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("f180ff85-7e87-4ee4-b836-263c4e88f62e"),
                            Name = "Науки о Земле и окружающей среде",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("2d516cb4-aaaa-43fc-a350-a2e85980a594"),
                            Name = "Биология",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("a46f7bf8-46cd-4ef7-ae84-f42e1f98766b"),
                            Name = "Другие естественные науки",
                            ScientificAreaId = new Guid("c02575a8-f8f6-443b-bf34-cc4c611eaa56")
                        },
                        new
                        {
                            Id = new Guid("2522b61e-0c20-4722-9fdb-2d3a460e5094"),
                            Name = "Гражданское строительство",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("f771d067-c21d-40b9-be59-d7762a88c8bb"),
                            Name = "Экологическая инженерия",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("78357a86-0215-48e2-bf9a-76018b12eada"),
                            Name = "Машиностроение",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("295a59ac-4ae8-4581-bab9-217aeffd7965"),
                            Name = "Электротехника, электроника, информационная инженерия",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("decf020f-c2f8-45b7-bc89-d6f82c01f52d"),
                            Name = "Химическая инженерия",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("19cdea20-0e7b-45db-9718-4e63188f911b"),
                            Name = "Материаловедение",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("270470e4-45e9-4102-b36f-76ffce1cf1e5"),
                            Name = "Медицинская инженерия",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("e13cd49f-235d-4c1e-974c-50a4b55647a2"),
                            Name = "Экологическая биотехнология",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("d053a8c6-2c6f-44b6-be38-43f67247c52a"),
                            Name = "Промышленная биотехнология",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("1cf61729-9b81-4404-8392-eaaf667e2b55"),
                            Name = "Нанотехнологии",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("2581d7b6-be07-4192-8596-0d4e0ff3d6d2"),
                            Name = "Другая инженерия и технологии",
                            ScientificAreaId = new Guid("504e19de-408a-4e0a-8cb7-48ef54f77927")
                        },
                        new
                        {
                            Id = new Guid("485e3787-e565-4248-8f57-b0bf22115746"),
                            Name = "Фундаментальная медицина",
                            ScientificAreaId = new Guid("f0295263-40ad-4c76-ae74-84b62204f960")
                        },
                        new
                        {
                            Id = new Guid("fbd78354-ad08-4e1f-8e10-ebbaff7d82e7"),
                            Name = "Клиническая медицина",
                            ScientificAreaId = new Guid("f0295263-40ad-4c76-ae74-84b62204f960")
                        },
                        new
                        {
                            Id = new Guid("a0843abe-dc53-4a7a-b124-520330df23da"),
                            Name = "Науки о здоровье",
                            ScientificAreaId = new Guid("f0295263-40ad-4c76-ae74-84b62204f960")
                        },
                        new
                        {
                            Id = new Guid("6583f065-39b4-4815-ba2b-56cef64eeb9f"),
                            Name = "Медицинская биотехнология",
                            ScientificAreaId = new Guid("f0295263-40ad-4c76-ae74-84b62204f960")
                        },
                        new
                        {
                            Id = new Guid("959343b9-920d-424e-9258-0280311e12ce"),
                            Name = "Другие медицинские науки",
                            ScientificAreaId = new Guid("f0295263-40ad-4c76-ae74-84b62204f960")
                        },
                        new
                        {
                            Id = new Guid("1789267c-cc66-4860-9014-7eb4bcf808d3"),
                            Name = "Сельское, лесное и рыбное хозяйство",
                            ScientificAreaId = new Guid("a1fab631-3a9d-4406-817a-81a142457bc9")
                        },
                        new
                        {
                            Id = new Guid("d6d6afca-3126-4e00-948e-2d22291da2d7"),
                            Name = "Животноводство и молочное производство",
                            ScientificAreaId = new Guid("a1fab631-3a9d-4406-817a-81a142457bc9")
                        },
                        new
                        {
                            Id = new Guid("9fcc23a2-040d-4c41-be0d-25cdea04b3c1"),
                            Name = "Ветеринария",
                            ScientificAreaId = new Guid("a1fab631-3a9d-4406-817a-81a142457bc9")
                        },
                        new
                        {
                            Id = new Guid("f3fe3772-ca92-43ce-9e30-0b9d13cdf4ad"),
                            Name = "Сельскохозяйственная биотехнология",
                            ScientificAreaId = new Guid("a1fab631-3a9d-4406-817a-81a142457bc9")
                        },
                        new
                        {
                            Id = new Guid("bf8311e8-41c1-43be-bc7f-d80d69ed201e"),
                            Name = "Другие сельскохозяйственные науки",
                            ScientificAreaId = new Guid("a1fab631-3a9d-4406-817a-81a142457bc9")
                        },
                        new
                        {
                            Id = new Guid("2700c1f0-1e12-4cfe-9d53-3a6f4958868c"),
                            Name = "Психология",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("95a333b5-ef29-4002-aa2f-e9a2d2bea612"),
                            Name = "Экономика и бизнес",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("dadd22e7-f5ca-4b67-859f-1a4978eb1613"),
                            Name = "Образовательные науки",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("d17df812-4f7f-4b6c-b4e1-a3554d92f7bc"),
                            Name = "Социология",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("f20828ce-69a4-4e77-b4f0-83c3d92554c3"),
                            Name = "Право",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("a2aadc74-bf10-4c15-b452-e5ec410167a0"),
                            Name = "Политология",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("5c55b5a8-0a45-4190-a519-5b75c107f2a6"),
                            Name = "Социально-экономическая география",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("950eaa3b-6d4d-4150-b67a-75baf4068b1e"),
                            Name = "Медиа и коммуникации",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("fbeb7038-1a0a-4499-a59a-f33bc6463c2b"),
                            Name = "Другие социальные науки",
                            ScientificAreaId = new Guid("9333925b-600e-490d-8799-3cfc568c055c")
                        },
                        new
                        {
                            Id = new Guid("541c065f-163f-4865-ab00-99e7396a78b9"),
                            Name = "История и археология",
                            ScientificAreaId = new Guid("ea637f26-0f94-4a20-8a4c-cbdb0e9d5b03")
                        },
                        new
                        {
                            Id = new Guid("6e04e447-7ceb-44b5-8306-570ab5e463e0"),
                            Name = "Языки и литература",
                            ScientificAreaId = new Guid("ea637f26-0f94-4a20-8a4c-cbdb0e9d5b03")
                        },
                        new
                        {
                            Id = new Guid("1547e7c6-a7ce-4578-b89a-9243a21c4477"),
                            Name = "Философия, этика и религия",
                            ScientificAreaId = new Guid("ea637f26-0f94-4a20-8a4c-cbdb0e9d5b03")
                        },
                        new
                        {
                            Id = new Guid("334d234f-df7f-4d21-96a1-dfbe153e1d77"),
                            Name = "Искусство (искусство, история искусств, исполнительское искусство, музыка)",
                            ScientificAreaId = new Guid("ea637f26-0f94-4a20-8a4c-cbdb0e9d5b03")
                        },
                        new
                        {
                            Id = new Guid("9137ba50-832b-48c8-92fe-521a90ba5a4f"),
                            Name = "Другие гуманитарные науки",
                            ScientificAreaId = new Guid("ea637f26-0f94-4a20-8a4c-cbdb0e9d5b03")
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificInterests.ScientificInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ScientificInterests");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsRegistrationComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastTokenResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RemovedAt");

                    b.HasIndex(new[] { "Email" }, "Email");

                    b.HasIndex(new[] { "NormalizedEmail" }, "NormalizedEmail")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "Description");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificWorksId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificWorkStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.ToTable("SystemAdmins", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Post")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("RISCUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ScopusUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("URPUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("WorkExperienceYears")
                        .HasColumnType("integer");

                    b.ToTable("Professors", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("HIndex")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteScientificWorks")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("ScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteStudents")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteProfessors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteScientificWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificWork");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Students.Student", "FavoriteStudent")
                        .WithMany()
                        .HasForeignKey("FavoriteStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FavoriteStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", "ScientificArea")
                        .WithMany("ScientificAreaSubsections")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificArea");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("ProfessorId");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Admins.SystemAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Professors.Professor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Students.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScientificWork.Domain.Students.ValueObjects.StudentSearchStatus", "SearchStatus", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("CommandSearching")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ProfessorSearching")
                                .HasColumnType("boolean");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("SearchStatus");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Navigation("ScientificAreaSubsections");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.Navigation("ProfessorFavoriteScientificWorks");

                    b.Navigation("ProfessorFavoriteStudents");

                    b.Navigation("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.Navigation("StudentFavoriteProfessors");

                    b.Navigation("StudentFavoriteScientificWorks");

                    b.Navigation("StudentFavoriteStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
