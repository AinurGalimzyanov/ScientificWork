// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScientificWork.Infrastructure.DataAccess;

#nullable disable

namespace ScientificWork.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240510203044_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificAreaSubsectionsId");

                    b.HasIndex("ScientificAreaSubsectionsId");

                    b.ToTable("ProfessorScientificAreaSubsection");
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificInterestsId");

                    b.HasIndex("ScientificInterestsId");

                    b.ToTable("ProfessorScientificInterest");
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificAreaSubsectionScientificWork");
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificAreaSubsectionStudent");
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificInterestScientificWork");
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificInterestStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("ProfessorFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProfessorFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("StudentFavoriteProfessor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("StudentFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoriteStudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "FavoriteStudentId");

                    b.HasIndex("FavoriteStudentId");

                    b.ToTable("StudentFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.Requests.StudentRequestProfessor", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StudentId", "ProfessorId", "Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("StudentRequestProfessors");
                });

            modelBuilder.Entity("ScientificWork.Domain.Requests.StudentRequestStudent", b =>
                {
                    b.Property<Guid>("StudentFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StudentFromId", "StudentToId", "Id");

                    b.HasIndex("ScientificWorkId");

                    b.HasIndex("StudentToId");

                    b.ToTable("StudentRequestStudents");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScientificAreas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27"),
                            Name = "Естественные науки"
                        },
                        new
                        {
                            Id = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747"),
                            Name = "Техника и технологии"
                        },
                        new
                        {
                            Id = new Guid("732d228c-3be6-41ba-a372-52a85035a781"),
                            Name = "Медицина и здравоохранение"
                        },
                        new
                        {
                            Id = new Guid("7034f484-3284-4f20-ae68-5736319b5237"),
                            Name = "Сельскохозяйственные науки"
                        },
                        new
                        {
                            Id = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162"),
                            Name = "Общественные науки"
                        },
                        new
                        {
                            Id = new Guid("e2038d3b-2bff-4adb-8d5e-a70c22f372cd"),
                            Name = "Гуманитарные науки"
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("ScientificAreaSubsections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09059f7b-5f69-42cd-982a-6b54a9d11ffc"),
                            Name = "Математика",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("001077ce-4453-47a7-b600-3aea2b31ad06"),
                            Name = "Компьютерные и информационные науки",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("9fa5f432-6777-43bd-a191-199b3584eda7"),
                            Name = "Физика",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("848be8a2-de9c-4376-a89e-e9cbee3051e1"),
                            Name = "Химия",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("dc02e8a0-b993-4794-9138-c7734a3b62d5"),
                            Name = "Науки о Земле и окружающей среде",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("89147876-b647-4a9f-b1ca-286faeaafafb"),
                            Name = "Биология",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("1e8f5872-b92e-4ae8-b7ab-6f9fd9a061a2"),
                            Name = "Другие естественные науки",
                            ScientificAreaId = new Guid("e26310f0-6088-4732-83b2-3a55cfc1ac27")
                        },
                        new
                        {
                            Id = new Guid("fa9f2a32-2b54-4972-9608-d29af225093f"),
                            Name = "Гражданское строительство",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("8fc51fda-7ca8-4e9f-a768-f439496a7e42"),
                            Name = "Экологическая инженерия",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("3bdff21c-d5e1-45b6-be40-7a352ef9f855"),
                            Name = "Машиностроение",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("29a1c266-068d-4b81-8806-ea1987b05780"),
                            Name = "Электротехника, электроника, информационная инженерия",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("aac7eeef-a005-4b60-9c54-e97124049940"),
                            Name = "Химическая инженерия",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("22324b99-fdbc-4fb4-8e69-d718705f6423"),
                            Name = "Материаловедение",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("f93f03d9-96e9-4e89-9f6c-f7156b58793e"),
                            Name = "Медицинская инженерия",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("464d3b72-bf4e-4399-a18f-31c28469a1e4"),
                            Name = "Экологическая биотехнология",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("efda1d36-8126-4e5b-b3a4-c0c1ab4f3e84"),
                            Name = "Промышленная биотехнология",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("7884f24a-3200-4f11-82b5-cad200e7f926"),
                            Name = "Нанотехнологии",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("e8f94232-d654-4e58-b32a-0dcf240e86f9"),
                            Name = "Другая инженерия и технологии",
                            ScientificAreaId = new Guid("5fc5311c-84b1-4d69-a9ca-19ccc026e747")
                        },
                        new
                        {
                            Id = new Guid("05259e2a-121c-4a67-845b-0d6b5e0bf4ba"),
                            Name = "Фундаментальная медицина",
                            ScientificAreaId = new Guid("732d228c-3be6-41ba-a372-52a85035a781")
                        },
                        new
                        {
                            Id = new Guid("3aac0d9a-7840-4815-b643-3332496b1354"),
                            Name = "Клиническая медицина",
                            ScientificAreaId = new Guid("732d228c-3be6-41ba-a372-52a85035a781")
                        },
                        new
                        {
                            Id = new Guid("d61da8e8-e22d-4358-a069-c3e8923b0fa3"),
                            Name = "Науки о здоровье",
                            ScientificAreaId = new Guid("732d228c-3be6-41ba-a372-52a85035a781")
                        },
                        new
                        {
                            Id = new Guid("cf295f58-59fa-4b91-89d9-d9e409c54acc"),
                            Name = "Медицинская биотехнология",
                            ScientificAreaId = new Guid("732d228c-3be6-41ba-a372-52a85035a781")
                        },
                        new
                        {
                            Id = new Guid("3d448fb4-d88e-4057-b9d2-fbacd72b1b94"),
                            Name = "Другие медицинские науки",
                            ScientificAreaId = new Guid("732d228c-3be6-41ba-a372-52a85035a781")
                        },
                        new
                        {
                            Id = new Guid("6b8ac5f9-4582-4619-81dc-d585090ff081"),
                            Name = "Сельское, лесное и рыбное хозяйство",
                            ScientificAreaId = new Guid("7034f484-3284-4f20-ae68-5736319b5237")
                        },
                        new
                        {
                            Id = new Guid("f5d65e28-a3c0-4e6b-8b2c-c5601cb9d2c3"),
                            Name = "Животноводство и молочное производство",
                            ScientificAreaId = new Guid("7034f484-3284-4f20-ae68-5736319b5237")
                        },
                        new
                        {
                            Id = new Guid("e508d968-9df3-495c-8064-ce6f74599606"),
                            Name = "Ветеринария",
                            ScientificAreaId = new Guid("7034f484-3284-4f20-ae68-5736319b5237")
                        },
                        new
                        {
                            Id = new Guid("4a588664-c853-4904-8619-75eb1688a487"),
                            Name = "Сельскохозяйственная биотехнология",
                            ScientificAreaId = new Guid("7034f484-3284-4f20-ae68-5736319b5237")
                        },
                        new
                        {
                            Id = new Guid("44e280df-2d72-4b7d-8472-7f40f2c07f41"),
                            Name = "Другие сельскохозяйственные науки",
                            ScientificAreaId = new Guid("7034f484-3284-4f20-ae68-5736319b5237")
                        },
                        new
                        {
                            Id = new Guid("0d9a5bda-772d-4741-8f93-376ac2083098"),
                            Name = "Психология",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("0c709fce-b568-4210-86da-0ccc4ee95518"),
                            Name = "Экономика и бизнес",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("21f5d181-77fa-44b6-a67d-f93b5fa6e56c"),
                            Name = "Образовательные науки",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("66cd5fce-e9f2-4f89-9e35-3206dd388651"),
                            Name = "Социология",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("777a9d79-9d80-49ea-b738-a4c9f2728558"),
                            Name = "Право",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("8f87e29f-fa4a-4339-992f-78be3a10bbf6"),
                            Name = "Политология",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("1bce0284-6331-449d-b549-c57ac3b3caf9"),
                            Name = "Социально-экономическая география",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("e16a9f12-742b-4085-96b2-3e57dd43369e"),
                            Name = "Медиа и коммуникации",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("17d5f102-0946-4866-865b-9bd14b1836bc"),
                            Name = "Другие социальные науки",
                            ScientificAreaId = new Guid("74ddf9aa-b993-43bb-802c-5cdfccda9162")
                        },
                        new
                        {
                            Id = new Guid("790b78c3-f8d1-4036-b16d-3ca95cf8ac68"),
                            Name = "История и археология",
                            ScientificAreaId = new Guid("e2038d3b-2bff-4adb-8d5e-a70c22f372cd")
                        },
                        new
                        {
                            Id = new Guid("4d27644f-8243-4ccc-a24b-e76929e0f549"),
                            Name = "Языки и литература",
                            ScientificAreaId = new Guid("e2038d3b-2bff-4adb-8d5e-a70c22f372cd")
                        },
                        new
                        {
                            Id = new Guid("d0386dde-493e-408b-8b6d-d60eaa603014"),
                            Name = "Философия, этика и религия",
                            ScientificAreaId = new Guid("e2038d3b-2bff-4adb-8d5e-a70c22f372cd")
                        },
                        new
                        {
                            Id = new Guid("1b2d8746-f335-4d6d-9bae-9fda7c50c991"),
                            Name = "Искусство (искусство, история искусств, исполнительское искусство, музыка)",
                            ScientificAreaId = new Guid("e2038d3b-2bff-4adb-8d5e-a70c22f372cd")
                        },
                        new
                        {
                            Id = new Guid("c43d356d-d137-4b22-a711-a0e503991ad9"),
                            Name = "Другие гуманитарные науки",
                            ScientificAreaId = new Guid("e2038d3b-2bff-4adb-8d5e-a70c22f372cd")
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificInterests.ScientificInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ScientificInterests");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsRegistrationComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastTokenResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RemovedAt");

                    b.HasIndex(new[] { "Email" }, "Email");

                    b.HasIndex(new[] { "NormalizedEmail" }, "NormalizedEmail")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "Description");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificWorksId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificWorkStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.ToTable("SystemAdmins", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Post")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("RISCUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ScopusUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("URPUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("WorkExperienceYears")
                        .HasColumnType("integer");

                    b.ToTable("Professors", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("HIndex")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteScientificWorks")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("ScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteStudents")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteProfessors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteScientificWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificWork");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Students.Student", "FavoriteStudent")
                        .WithMany()
                        .HasForeignKey("FavoriteStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FavoriteStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ScientificWork.Domain.Requests.StudentRequestProfessor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("StudentRequestProfessors")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentRequestProfessors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("ScientificWork");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Requests.StudentRequestStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "StudentFrom")
                        .WithMany("StudentRequestStudents")
                        .HasForeignKey("StudentFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "StudentTo")
                        .WithMany()
                        .HasForeignKey("StudentToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScientificWork");

                    b.Navigation("StudentFrom");

                    b.Navigation("StudentTo");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", "ScientificArea")
                        .WithMany("ScientificAreaSubsections")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificArea");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("ProfessorId");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Admins.SystemAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Professors.Professor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Students.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScientificWork.Domain.Students.ValueObjects.StudentSearchStatus", "SearchStatus", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("CommandSearching")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ProfessorSearching")
                                .HasColumnType("boolean");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("SearchStatus");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Navigation("ScientificAreaSubsections");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.Navigation("ProfessorFavoriteScientificWorks");

                    b.Navigation("ProfessorFavoriteStudents");

                    b.Navigation("ScientificWorks");

                    b.Navigation("StudentRequestProfessors");
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.Navigation("StudentFavoriteProfessors");

                    b.Navigation("StudentFavoriteScientificWorks");

                    b.Navigation("StudentFavoriteStudents");

                    b.Navigation("StudentRequestProfessors");

                    b.Navigation("StudentRequestStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
