// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScientificWork.Infrastructure.DataAccess;

#nullable disable

namespace ScientificWork.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240511085524_Avatars")]
    partial class Avatars
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificAreaSubsectionsId");

                    b.HasIndex("ScientificAreaSubsectionsId");

                    b.ToTable("ProfessorScientificAreaSubsection");
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificInterestsId");

                    b.HasIndex("ScientificInterestsId");

                    b.ToTable("ProfessorScientificInterest");
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificAreaSubsectionScientificWork");
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificAreaSubsectionStudent");
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificInterestScientificWork");
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificInterestStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("ProfessorFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProfessorFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("StudentFavoriteProfessor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("StudentFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoriteStudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "FavoriteStudentId");

                    b.HasIndex("FavoriteStudentId");

                    b.ToTable("StudentFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScientificAreas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("144e5953-9231-465f-b9af-34b963a26080"),
                            Name = "Естественные науки"
                        },
                        new
                        {
                            Id = new Guid("83577c66-989f-4076-b257-30d6ac86b174"),
                            Name = "Техника и технологии"
                        },
                        new
                        {
                            Id = new Guid("0fc4dc20-1c67-4873-936d-b343c46ebd58"),
                            Name = "Медицина и здравоохранение"
                        },
                        new
                        {
                            Id = new Guid("4c1e0888-33d3-4523-bd6b-57ade4b8943a"),
                            Name = "Сельскохозяйственные науки"
                        },
                        new
                        {
                            Id = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357"),
                            Name = "Общественные науки"
                        },
                        new
                        {
                            Id = new Guid("df4e9a09-81e0-4fc3-9a15-6b8c5a513aec"),
                            Name = "Гуманитарные науки"
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("ScientificAreaSubsections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be81030b-2b49-40ef-99c4-8b54e8aaa7d4"),
                            Name = "Математика",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("c185656a-a463-45c6-9e54-105bec694d75"),
                            Name = "Компьютерные и информационные науки",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("a7def792-13dc-4a40-85dc-36a7f4b5e769"),
                            Name = "Физика",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("a6673f57-a90d-4a35-a0fc-5687f4bebec9"),
                            Name = "Химия",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("44a259cf-0144-46e3-8120-626dc313813a"),
                            Name = "Науки о Земле и окружающей среде",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("288899e2-1cfd-4214-bd3b-d7824b766908"),
                            Name = "Биология",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("dc9f987a-be20-4980-baad-12a8272c0e39"),
                            Name = "Другие естественные науки",
                            ScientificAreaId = new Guid("144e5953-9231-465f-b9af-34b963a26080")
                        },
                        new
                        {
                            Id = new Guid("60c9a85b-416c-4dd9-b7ac-f2a2816899d7"),
                            Name = "Гражданское строительство",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("785d9b22-9133-442c-bd36-3a35f800a693"),
                            Name = "Экологическая инженерия",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("0ca584af-dcd2-4fbf-8002-9f6a1d21795a"),
                            Name = "Машиностроение",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("04e0eb76-25f2-4977-a8b2-5ebdb6b0e6ab"),
                            Name = "Электротехника, электроника, информационная инженерия",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("3957e9d9-a7ea-4087-88b2-99e3560e9280"),
                            Name = "Химическая инженерия",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("0fb8c77e-100f-42d1-bb84-5d996e4427e7"),
                            Name = "Материаловедение",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("e9f35d3d-a4fa-4419-8c7f-882f9d86e98d"),
                            Name = "Медицинская инженерия",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("2056a0d5-55e8-4505-aee8-ccb9d38ff2b8"),
                            Name = "Экологическая биотехнология",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("d746b673-ad06-4203-b1aa-c01ba3a9f1d5"),
                            Name = "Промышленная биотехнология",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("23671b4a-a1b9-49cd-a939-3843cd5d15f4"),
                            Name = "Нанотехнологии",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("9b9cf514-0398-44a3-8cc2-cc7c891f00fa"),
                            Name = "Другая инженерия и технологии",
                            ScientificAreaId = new Guid("83577c66-989f-4076-b257-30d6ac86b174")
                        },
                        new
                        {
                            Id = new Guid("eb14030f-afa3-4700-893b-96593b2911fc"),
                            Name = "Фундаментальная медицина",
                            ScientificAreaId = new Guid("0fc4dc20-1c67-4873-936d-b343c46ebd58")
                        },
                        new
                        {
                            Id = new Guid("08999c3e-8cb6-44cd-92c7-32391f7e313c"),
                            Name = "Клиническая медицина",
                            ScientificAreaId = new Guid("0fc4dc20-1c67-4873-936d-b343c46ebd58")
                        },
                        new
                        {
                            Id = new Guid("6d83ef2e-7340-44ca-9816-0a59c5951e76"),
                            Name = "Науки о здоровье",
                            ScientificAreaId = new Guid("0fc4dc20-1c67-4873-936d-b343c46ebd58")
                        },
                        new
                        {
                            Id = new Guid("614c8266-853c-4c50-b650-619718c48f9a"),
                            Name = "Медицинская биотехнология",
                            ScientificAreaId = new Guid("0fc4dc20-1c67-4873-936d-b343c46ebd58")
                        },
                        new
                        {
                            Id = new Guid("39b25611-27cf-474a-90ce-e5f33058ee9e"),
                            Name = "Другие медицинские науки",
                            ScientificAreaId = new Guid("0fc4dc20-1c67-4873-936d-b343c46ebd58")
                        },
                        new
                        {
                            Id = new Guid("d69ffebb-62e7-49e4-a8ce-efbbad870df2"),
                            Name = "Сельское, лесное и рыбное хозяйство",
                            ScientificAreaId = new Guid("4c1e0888-33d3-4523-bd6b-57ade4b8943a")
                        },
                        new
                        {
                            Id = new Guid("bc851ba2-0fe3-499b-970e-009264996e8a"),
                            Name = "Животноводство и молочное производство",
                            ScientificAreaId = new Guid("4c1e0888-33d3-4523-bd6b-57ade4b8943a")
                        },
                        new
                        {
                            Id = new Guid("36bf8d0a-1b88-486d-9da0-dd61a47a1102"),
                            Name = "Ветеринария",
                            ScientificAreaId = new Guid("4c1e0888-33d3-4523-bd6b-57ade4b8943a")
                        },
                        new
                        {
                            Id = new Guid("a497e604-1f32-4662-bd99-1c8f18f51d06"),
                            Name = "Сельскохозяйственная биотехнология",
                            ScientificAreaId = new Guid("4c1e0888-33d3-4523-bd6b-57ade4b8943a")
                        },
                        new
                        {
                            Id = new Guid("53cd3142-1ca5-47a3-8335-0c904ccc10f6"),
                            Name = "Другие сельскохозяйственные науки",
                            ScientificAreaId = new Guid("4c1e0888-33d3-4523-bd6b-57ade4b8943a")
                        },
                        new
                        {
                            Id = new Guid("0c3449e8-17a7-484d-85f7-2607647475af"),
                            Name = "Психология",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("7e6cf47f-128f-4e3e-98a2-1b4f60c8d39f"),
                            Name = "Экономика и бизнес",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("68e802a8-fb8b-4aae-a617-91c5b075b8b4"),
                            Name = "Образовательные науки",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("eeb55464-d6c8-4b28-aeb1-50f8cdcb1822"),
                            Name = "Социология",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("2166823e-fee4-4d38-8f3f-b85fb7fab75f"),
                            Name = "Право",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("06446a73-1020-4d80-beb7-870d50e720ef"),
                            Name = "Политология",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("a4cf3dc4-6fb8-4088-81ac-856340b7d440"),
                            Name = "Социально-экономическая география",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("b1f016a1-68ab-4f94-99aa-e7f95bf2194c"),
                            Name = "Медиа и коммуникации",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("7481329d-6d77-4271-818f-2fd12273f548"),
                            Name = "Другие социальные науки",
                            ScientificAreaId = new Guid("9988a887-a121-40f2-9c3b-196cdf0f1357")
                        },
                        new
                        {
                            Id = new Guid("ea15b13a-f5f0-4dc5-aa48-1d4a41fa4f04"),
                            Name = "История и археология",
                            ScientificAreaId = new Guid("df4e9a09-81e0-4fc3-9a15-6b8c5a513aec")
                        },
                        new
                        {
                            Id = new Guid("f5a5bf2d-77e4-4c18-ac8f-bd531bb275b5"),
                            Name = "Языки и литература",
                            ScientificAreaId = new Guid("df4e9a09-81e0-4fc3-9a15-6b8c5a513aec")
                        },
                        new
                        {
                            Id = new Guid("7fd7b765-9907-442f-86c9-7e76afeda64a"),
                            Name = "Философия, этика и религия",
                            ScientificAreaId = new Guid("df4e9a09-81e0-4fc3-9a15-6b8c5a513aec")
                        },
                        new
                        {
                            Id = new Guid("bd7f7e67-47f7-4bf0-8aa6-931a0584ae94"),
                            Name = "Искусство (искусство, история искусств, исполнительское искусство, музыка)",
                            ScientificAreaId = new Guid("df4e9a09-81e0-4fc3-9a15-6b8c5a513aec")
                        },
                        new
                        {
                            Id = new Guid("f0a8c4d6-fe5f-47e5-ab13-039bda6d38d0"),
                            Name = "Другие гуманитарные науки",
                            ScientificAreaId = new Guid("df4e9a09-81e0-4fc3-9a15-6b8c5a513aec")
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificInterests.ScientificInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ScientificInterests");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titile")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarImagePath")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsRegistrationComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastTokenResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RemovedAt");

                    b.HasIndex(new[] { "Email" }, "Email");

                    b.HasIndex(new[] { "NormalizedEmail" }, "NormalizedEmail")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "Description");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificWorksId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificWorkStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.ToTable("SystemAdmins", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Post")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("RISCUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScopusUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("URPUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("WorkExperienceYears")
                        .HasColumnType("integer");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("Professors", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("HIndex")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteScientificWorks")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("ScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteStudents")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteProfessors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteScientificWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificWork");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Students.Student", "FavoriteStudent")
                        .WithMany()
                        .HasForeignKey("FavoriteStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FavoriteStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", "ScientificArea")
                        .WithMany("ScientificAreaSubsections")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificArea");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("ProfessorId");

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", null)
                        .WithMany("ScientificWorks")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Admins.SystemAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Professors.Professor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", null)
                        .WithMany("Professors")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Students.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", null)
                        .WithMany("Students")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("ScientificWork.Domain.Students.ValueObjects.StudentSearchStatus", "SearchStatus", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("CommandSearching")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ProfessorSearching")
                                .HasColumnType("boolean");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("SearchStatus");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("ScientificAreaSubsections");

                    b.Navigation("ScientificWorks");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.Navigation("ProfessorFavoriteScientificWorks");

                    b.Navigation("ProfessorFavoriteStudents");

                    b.Navigation("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.Navigation("StudentFavoriteProfessors");

                    b.Navigation("StudentFavoriteScientificWorks");

                    b.Navigation("StudentFavoriteStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
