// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScientificWork.Infrastructure.DataAccess;

#nullable disable

namespace ScientificWork.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificAreasSubsectionsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificAreasSubsectionsId");

                    b.HasIndex("ScientificAreasSubsectionsId");

                    b.ToTable("ProfessorScientificAreaSubsection");
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.Property<Guid>("ProfessorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfessorsId", "ScientificInterestsId");

                    b.HasIndex("ScientificInterestsId");

                    b.ToTable("ProfessorScientificInterest");
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificAreaSubsectionScientificWork");
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.Property<Guid>("ScientificAreaSubsectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificAreaSubsectionsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificAreaSubsectionStudent");
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "ScientificWorksId");

                    b.HasIndex("ScientificWorksId");

                    b.ToTable("ScientificInterestScientificWork");
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.Property<Guid>("ScientificInterestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificInterestsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificInterestStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("ProfessorFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ProfessorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProfessorFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("StudentFavoriteProfessor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScientificWorkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "ScientificWorkId");

                    b.HasIndex("ScientificWorkId");

                    b.ToTable("StudentFavoriteScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoriteStudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("StudentId", "FavoriteStudentId");

                    b.HasIndex("FavoriteStudentId");

                    b.ToTable("StudentFavoriteStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScientificAreas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74"),
                            Name = "Естественные науки"
                        },
                        new
                        {
                            Id = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795"),
                            Name = "Техника и технологии"
                        },
                        new
                        {
                            Id = new Guid("9cd85389-3ab2-4148-bd96-5d2095621226"),
                            Name = "Медицина и здравоохранение"
                        },
                        new
                        {
                            Id = new Guid("da07a9fd-b6ae-4f2c-bf7a-ee375e9e3377"),
                            Name = "Сельскохозяйственные науки"
                        },
                        new
                        {
                            Id = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8"),
                            Name = "Общественные науки"
                        },
                        new
                        {
                            Id = new Guid("31cdb569-18fe-4b7d-84be-17b085020d61"),
                            Name = "Гуманитарные науки"
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("ScientificAreaSubsections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c00db30a-5880-4f91-a050-cb1f3c110f7f"),
                            Name = "Математика",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("bb5df083-b35e-411c-9c8b-3822f0282bfd"),
                            Name = "Компьютерные и информационные науки",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("98950ede-e5f7-4b83-8c65-c770392ddd4d"),
                            Name = "Физика",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("af256762-ee43-42d0-83d0-45b4ebd8e8fb"),
                            Name = "Химия",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("1d7f1d6f-2762-4415-9a8f-935d890ae590"),
                            Name = "Науки о Земле и окружающей среде",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("9cfef28d-e0fb-4c85-acfe-268809296111"),
                            Name = "Биология",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("26881303-a1a6-49c7-b932-1b74eea15a79"),
                            Name = "Другие естественные науки",
                            ScientificAreaId = new Guid("0a6ba426-d2c1-40b6-ba0b-0d82b0d63c74")
                        },
                        new
                        {
                            Id = new Guid("9fb65f60-42e5-4e27-8eb1-f90dbaf3e068"),
                            Name = "Гражданское строительство",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("01f5d82a-91a1-4d8d-944e-38a6ef765dde"),
                            Name = "Экологическая инженерия",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("1ed975b6-e209-4b96-9ef8-5ec64ad2a909"),
                            Name = "Машиностроение",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("081858c0-25f2-4112-8d82-ec1855c19154"),
                            Name = "Электротехника, электроника, информационная инженерия",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("19ce95fc-3a70-45ef-9a8d-c27cce1d48bb"),
                            Name = "Химическая инженерия",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("65d0dba2-9a75-49c9-875b-59a3ee172ff3"),
                            Name = "Материаловедение",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("343f3e41-d128-46d5-8d08-a15ae5236e09"),
                            Name = "Медицинская инженерия",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("8925fda8-ffc8-4cc8-9314-14557c8e8821"),
                            Name = "Экологическая биотехнология",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("1e845278-1923-4d73-9ead-dcd123853d09"),
                            Name = "Промышленная биотехнология",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("5a4bc36c-7ae7-4310-8db3-583f04fa1467"),
                            Name = "Нанотехнологии",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("a6dbbd1d-251d-473d-aa7c-a2bc43ad1547"),
                            Name = "Другая инженерия и технологии",
                            ScientificAreaId = new Guid("e24c7dae-9183-4de1-9e3c-285f574de795")
                        },
                        new
                        {
                            Id = new Guid("3da3d7ab-7385-4974-bec1-870d4c4296fb"),
                            Name = "Фундаментальная медицина",
                            ScientificAreaId = new Guid("9cd85389-3ab2-4148-bd96-5d2095621226")
                        },
                        new
                        {
                            Id = new Guid("d9b780dc-2b11-4b65-b23c-280ae27572df"),
                            Name = "Клиническая медицина",
                            ScientificAreaId = new Guid("9cd85389-3ab2-4148-bd96-5d2095621226")
                        },
                        new
                        {
                            Id = new Guid("0840be36-affd-4c21-b3c3-7e72c2e83438"),
                            Name = "Науки о здоровье",
                            ScientificAreaId = new Guid("9cd85389-3ab2-4148-bd96-5d2095621226")
                        },
                        new
                        {
                            Id = new Guid("010969ec-722f-44b4-afa2-eab34654c979"),
                            Name = "Медицинская биотехнология",
                            ScientificAreaId = new Guid("9cd85389-3ab2-4148-bd96-5d2095621226")
                        },
                        new
                        {
                            Id = new Guid("8656aff6-8663-4cf5-b31b-8c3408a6cd26"),
                            Name = "Другие медицинские науки",
                            ScientificAreaId = new Guid("9cd85389-3ab2-4148-bd96-5d2095621226")
                        },
                        new
                        {
                            Id = new Guid("5de89ea4-3e68-4994-8e18-ee7d7ea4d041"),
                            Name = "Сельское, лесное и рыбное хозяйство",
                            ScientificAreaId = new Guid("da07a9fd-b6ae-4f2c-bf7a-ee375e9e3377")
                        },
                        new
                        {
                            Id = new Guid("87258c27-1897-48cd-b0da-03bf02dba63f"),
                            Name = "Животноводство и молочное производство",
                            ScientificAreaId = new Guid("da07a9fd-b6ae-4f2c-bf7a-ee375e9e3377")
                        },
                        new
                        {
                            Id = new Guid("5448d0c6-4ed8-4208-8fa3-d6dcb4d3a471"),
                            Name = "Ветеринария",
                            ScientificAreaId = new Guid("da07a9fd-b6ae-4f2c-bf7a-ee375e9e3377")
                        },
                        new
                        {
                            Id = new Guid("709b78e8-f4dd-4e20-ab92-3eb6fc725175"),
                            Name = "Сельскохозяйственная биотехнология",
                            ScientificAreaId = new Guid("da07a9fd-b6ae-4f2c-bf7a-ee375e9e3377")
                        },
                        new
                        {
                            Id = new Guid("1fb1c458-fd59-44a5-bb0e-11c1e2faa286"),
                            Name = "Другие сельскохозяйственные науки",
                            ScientificAreaId = new Guid("da07a9fd-b6ae-4f2c-bf7a-ee375e9e3377")
                        },
                        new
                        {
                            Id = new Guid("1209c6d3-19e4-480a-890f-df8fd54d8b23"),
                            Name = "Психология",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("36551066-ca3b-4344-aa05-f8cd4dc6e5e7"),
                            Name = "Экономика и бизнес",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("43dad39c-5f9a-4fa1-a92d-8c087ec09d9b"),
                            Name = "Образовательные науки",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("f5fdf544-d5bf-4b37-8ee3-1516ea0ad0f6"),
                            Name = "Социология",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("d588e5fb-571d-4cfe-9feb-b8c80463e484"),
                            Name = "Право",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("0d8f03d9-c7f7-49ce-9589-ec9c01805880"),
                            Name = "Политология",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("a8da144b-d985-4d64-a705-5fc0d6d5da8b"),
                            Name = "Социально-экономическая география",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("3d71dba9-e56a-4863-9d56-2116d181de2a"),
                            Name = "Медиа и коммуникации",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("e399056c-d94e-4e41-96ad-54211b6fac92"),
                            Name = "Другие социальные науки",
                            ScientificAreaId = new Guid("f58501e7-4d73-495c-ae1b-3274ec5b00c8")
                        },
                        new
                        {
                            Id = new Guid("b058e834-e094-471b-8012-32d83d81fa43"),
                            Name = "История и археология",
                            ScientificAreaId = new Guid("31cdb569-18fe-4b7d-84be-17b085020d61")
                        },
                        new
                        {
                            Id = new Guid("4f104781-5f32-4967-b49b-ece44acba781"),
                            Name = "Языки и литература",
                            ScientificAreaId = new Guid("31cdb569-18fe-4b7d-84be-17b085020d61")
                        },
                        new
                        {
                            Id = new Guid("c4a214d5-bde7-4f04-87b3-10a65e5f8b3b"),
                            Name = "Философия, этика и религия",
                            ScientificAreaId = new Guid("31cdb569-18fe-4b7d-84be-17b085020d61")
                        },
                        new
                        {
                            Id = new Guid("a75d33d5-f419-47ad-b8ab-02050876c878"),
                            Name = "Искусство (искусство, история искусств, исполнительское искусство, музыка)",
                            ScientificAreaId = new Guid("31cdb569-18fe-4b7d-84be-17b085020d61")
                        },
                        new
                        {
                            Id = new Guid("8bae972a-f26a-4e79-829e-37c75fdf138a"),
                            Name = "Другие гуманитарные науки",
                            ScientificAreaId = new Guid("31cdb569-18fe-4b7d-84be-17b085020d61")
                        });
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificInterests.ScientificInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ScientificInterests");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Titile")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsRegistrationComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastTokenResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RemovedAt");

                    b.HasIndex(new[] { "Email" }, "Email");

                    b.HasIndex(new[] { "NormalizedEmail" }, "NormalizedEmail")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "Description");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.Property<Guid>("ScientificWorksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("ScientificWorksId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ScientificWorkStudent");
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.ToTable("SystemAdmins", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("Fullness")
                        .HasColumnType("integer");

                    b.Property<int>("HIndex")
                        .HasColumnType("integer");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Post")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("integer");

                    b.Property<string>("RISCUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<Guid?>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScopusUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Titile")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("URPUri")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("WorkExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("Сontacts")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("Professors", (string)null);
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasBaseType("ScientificWork.Domain.Users.User");

                    b.Property<string>("About")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Degree")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("HIndex")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScientificAreaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasIndex("ScientificAreaId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreasSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorScientificInterest", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificAreaSubsectionStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", null)
                        .WithMany()
                        .HasForeignKey("ScientificAreaSubsectionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificInterestStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificInterests.ScientificInterest", null)
                        .WithMany()
                        .HasForeignKey("ScientificInterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteScientificWorks")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("ScientificWork");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.ProfessorFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ProfessorFavoriteStudents")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteProfessor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteProfessors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", "ScientificWork")
                        .WithMany()
                        .HasForeignKey("ScientificWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteScientificWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificWork");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Favorites.StudentFavoriteStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.Students.Student", "FavoriteStudent")
                        .WithMany()
                        .HasForeignKey("FavoriteStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", "Student")
                        .WithMany("StudentFavoriteStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FavoriteStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScientificWork.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificAreaSubsection", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", "ScientificArea")
                        .WithMany("ScientificAreaSubsections")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScientificArea");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificWorks.ScientificWork", b =>
                {
                    b.HasOne("ScientificWork.Domain.Professors.Professor", "Professor")
                        .WithMany("ScientificWorks")
                        .HasForeignKey("ProfessorId");

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", null)
                        .WithMany("ScientificWorks")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.UserToken", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScientificWorkStudent", b =>
                {
                    b.HasOne("ScientificWork.Domain.ScientificWorks.ScientificWork", null)
                        .WithMany()
                        .HasForeignKey("ScientificWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Admins.SystemAdmin", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Admins.SystemAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Professors.Professor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", null)
                        .WithMany("Professors")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.HasOne("ScientificWork.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ScientificWork.Domain.Students.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientificWork.Domain.ScientificAreas.ScientificArea", null)
                        .WithMany("Students")
                        .HasForeignKey("ScientificAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("ScientificWork.Domain.Students.ValueObjects.StudentSearchStatus", "SearchStatus", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("CommandSearching")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ProfessorSearching")
                                .HasColumnType("boolean");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("SearchStatus");
                });

            modelBuilder.Entity("ScientificWork.Domain.ScientificAreas.ScientificArea", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("ScientificAreaSubsections");

                    b.Navigation("ScientificWorks");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ScientificWork.Domain.Users.User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ScientificWork.Domain.Professors.Professor", b =>
                {
                    b.Navigation("ProfessorFavoriteScientificWorks");

                    b.Navigation("ProfessorFavoriteStudents");

                    b.Navigation("ScientificWorks");
                });

            modelBuilder.Entity("ScientificWork.Domain.Students.Student", b =>
                {
                    b.Navigation("StudentFavoriteProfessors");

                    b.Navigation("StudentFavoriteScientificWorks");

                    b.Navigation("StudentFavoriteStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
